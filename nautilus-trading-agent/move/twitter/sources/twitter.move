// Copyright (c), Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0


module app::twitter;

use std::string::{Self, String};
use enclave::enclave::{Self, Enclave};

const TWEET_INTENT: u8 = 0;
const EInvalidSignature: u64 = 1;

public struct Twitter has key, store {
    id: UID,
    twitter_name: String,
    sui_address: vector<u8>,
}

/// Should match the inner struct T used for IntentMessage<T> in Rust.
public struct UserData has copy, drop {
    twitter_name: vector<u8>,
    sui_address: vector<u8>,
}

public struct TWITTER has drop {}

fun init(otw: TWITTER, ctx: &mut TxContext) {
    let cap = enclave::new_cap(otw, ctx);

    cap.create_enclave_config(
        std::string::utf8(b"twitter enclave"),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr0
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr1
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr2
        ctx,
    );
    transfer::public_transfer(cap, tx_context::sender(ctx))
}

public fun mint_nft<T>(twitter_name: vector<u8>, timestamp_ms: u64, sig: &vector<u8>, enclave: &Enclave<T>, ctx: &mut TxContext): Twitter {
    let sui_address = ctx.sender().to_bytes();

    let res = enclave::verify_signature<T, UserData>(enclave, TWEET_INTENT, timestamp_ms, UserData { twitter_name, sui_address }, sig);
    assert!(res, EInvalidSignature);

    Twitter {
        id: object::new(ctx),
        twitter_name: string::utf8(twitter_name),
        sui_address,
    }
}

#[test]
fun test_twitter_flow() {
    use sui::test_scenario::{Self, ctx, next_tx};
    use sui::nitro_attestation;
    use sui::test_utils::destroy;
    use enclave::enclave::{register_enclave, create_enclave_config, update_pcrs, EnclaveConfig};
    
    let mut scenario = test_scenario::begin(@0x4668aa5963dacfe3e169be3cf824395ab9de3f0a544fc2ca638858a536b5ff4b);
    let mut clock = sui::clock::create_for_testing(ctx(&mut scenario));
    clock.set_for_testing(1744731549746);

    let cap = enclave::new_cap(
        TWITTER {},
        ctx(&mut scenario),
    );

    cap.create_enclave_config(
        string::utf8(b"twitter enclave"),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        ctx(&mut scenario),
    );
    next_tx(&mut scenario, @0x101ce8865558e08408b83f60ee9e78843d03d547c850cbe12cb599e17833dd3e);

    let mut config = test_scenario::take_shared<EnclaveConfig<TWITTER>>(&scenario);
    config.update_pcrs(
        &cap,
        x"8912462a02fd4f827c5e9c7d12d8f33acc3ae99f23dcf35054f6d157a243edf3b78dc2781b7eb8335745ae4817388b41",
        x"8912462a02fd4f827c5e9c7d12d8f33acc3ae99f23dcf35054f6d157a243edf3b78dc2781b7eb8335745ae4817388b41",
        x"21b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a",
    );
    next_tx(&mut scenario, @0x1);

    // a valid attestation for the timestamp
    let payload = x"8444a1013822a059111fa9696d6f64756c655f69647827692d30306434393461343666346633633039312d656e633031393633396635633030663665306366646967657374665348413338346974696d657374616d701b000001963a1a820f6470637273b00058308912462a02fd4f827c5e9c7d12d8f33acc3ae99f23dcf35054f6d157a243edf3b78dc2781b7eb8335745ae4817388b410158308912462a02fd4f827c5e9c7d12d8f33acc3ae99f23dcf35054f6d157a243edf3b78dc2781b7eb8335745ae4817388b4102583021b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a0358306ff6866e2ab6995851c7432d9d180cadf34e9664263b3936726fa9601dfe7b7b70e4be41389bd29a1c8171cf8a4f5769045830fb341af0b34863d797c88a665a748e97da7ecfe422e43ba0f2c9d79db045ab3c98a62293de179b88d27dfa58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006b636572746966696361746559027f3082027b30820201a0030201020210019639f5c00f6e0c0000000067fe7494300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30306434393461343666346633633039312e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303431353135303033335a170d3235303431353138303033365a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30306434393461343666346633633039312d656e63303139363339663563303066366530632e75732d656173742d312e6177733076301006072a8648ce3d020106052b8104002203620004d78c900f09e001a734128e60b8ad6c241de60e3c901a2119343b20e3f9d21a35fb75d9d17e3d046ea846eb5f3162ae2619c5042a8ac0c01e15ada05fbfa715112ea73677c910ae3f0fcd90966ad92329020595647ac7795d4d16983fa1094018a31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d040303036800306502302189d3735c7fddfa7f69f45be5e1d4948353545b89734f38d7942ae3921189fecd35c4524ed7fa66bd96aa2a500091ba02310097ac0a36959c39d5c21343f9876f87625f07fd40c337a40b581f84e52dd3be9e0f66dadda38d6f11cf8e17248140f98468636162756e646c65845902153082021130820196a003020102021100f93175681b90afe11d46ccb4e4e7f856300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3139313032383133323830355a170d3439313032383134323830355a3049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004fc0254eba608c1f36870e29ada90be46383292736e894bfff672d989444b5051e534a4b1f6dbe3c0bc581a32b7b176070ede12d69a3fea211b66e752cf7dd1dd095f6f1370f4170843d9dc100121e4cf63012809664487c9796284304dc53ff4a3423040300f0603551d130101ff040530030101ff301d0603551d0e041604149025b50dd90547e796c396fa729dcf99a9df4b96300e0603551d0f0101ff040403020186300a06082a8648ce3d0403030369003066023100a37f2f91a1c9bd5ee7b8627c1698d255038e1f0343f95b63a9628c3d39809545a11ebcbf2e3b55d8aeee71b4c3d6adf3023100a2f39b1605b27028a5dd4ba069b5016e65b4fbde8fe0061d6a53197f9cdaf5d943bc61fc2beb03cb6fee8d2302f3dff65902c2308202be30820245a003020102021100aca2293d4cf500edd86a7bd187ba1338300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3235303431313136333235355a170d3235303530313137333235355a3064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d356139363331373264336535616338622e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b810400220362000490c21b3f525af903e794663217497520278d2139f1d1a0b20eb8ff5355c8aed6ac269cea960f70493d0a4133b6cba128c820e80f40864bc032ac9b818e45c587f53d07eafc78fb530b2a1869858e55ef33c8e61e2dc6f370a308ad65d94ed1eea381d53081d230120603551d130101ff040830060101ff020102301f0603551d230418301680149025b50dd90547e796c396fa729dcf99a9df4b96301d0603551d0e04160414add2c2173808b510358d217b3b86fb8f1ad6b173300e0603551d0f0101ff040403020186306c0603551d1f046530633061a05fa05d865b687474703a2f2f6177732d6e6974726f2d656e636c617665732d63726c2e73332e616d617a6f6e6177732e636f6d2f63726c2f61623439363063632d376436332d343262642d396539662d3539333338636236376638342e63726c300a06082a8648ce3d040303036700306402300249f3400cd372979e8b38574f68abb0c09985ebba87d6ff7ed39565b5d60cf1219e5148ac25ec631730542aebd5c5810230615675a1d4841c819082db134b1717eb4b6676c812f09130b1cfe7a9f62a02a072b5c336425a14fbbd1d80d74b356b85590318308203143082029aa0030201020210096599e56b6b822f660e3be350a9d9de300a06082a8648ce3d0403033064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d356139363331373264336535616338622e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303431353035303933355a170d3235303432313033303933355a308189313c303a06035504030c33333839373939663837373066303533652e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c653076301006072a8648ce3d020106052b81040022036200049ad1c787cb04e9f43bc60e702b64eeed1363869aa8ac5730e163e45672a60d6d87ecfcfad6f689bc3f75fa8e30dcb0a2b535efe31d84fb7cd8f7849e30feb478a0becaf9a791cbd8ef4153257c929644bfd5d444e6c017c444fdae31578cb1d8a381ea3081e730120603551d130101ff040830060101ff020101301f0603551d23041830168014add2c2173808b510358d217b3b86fb8f1ad6b173301d0603551d0e04160414a8b7752220bb7c7104db500ae6a9b243efcbd5c8300e0603551d0f0101ff0404030201863081800603551d1f047930773075a073a071866f687474703a2f2f63726c2d75732d656173742d312d6177732d6e6974726f2d656e636c617665732e73332e75732d656173742d312e616d617a6f6e6177732e636f6d2f63726c2f66326463623035372d333434352d343963642d626131382d3733396663666466353261632e63726c300a06082a8648ce3d040303036800306502302ecd7d1717f1849c8571953fa310c7a5398a42c2f4baa3c5f63562cb3dab795f3d2dffb2a7069abeaa25ee406c9af40a0231008d6f4525fa340e62d4bd32e50f18648940ed279e4d63d9174022945f554eb745130ff9a407435d8f8b4bed01468ce8075902c2308202be30820244a003020102021400e625a19be9043472a10118006ad0145ea70db2300a06082a8648ce3d040303308189313c303a06035504030c33333839373939663837373066303533652e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c65301e170d3235303431353134343330335a170d3235303431363134343330335a30818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30306434393461343666346633633039312e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b81040022036200040377b5ada6604b6d2201ba33d810c869f961e54d7159bb4bfe37e7ecb57dbb1de97ed9dc9ef3c8647977261c8d4ae2f1a40a27ecb57d35af186b29525fbe2f78d28b787b05063bb6de6684832e500b369c67b0e3ec733edd4c69694d3feeee56a366306430120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020204301d0603551d0e04160414f6a6e27eda108c1139db1ecbf437980f6131df67301f0603551d23041830168014a8b7752220bb7c7104db500ae6a9b243efcbd5c8300a06082a8648ce3d040303036800306502307cb1376dc37b0c903ba589b16332d75423fb38130168f0a10ee6f26505c17512d90fbd7b67f4f9e16c85b5ce42f05b21023100d595bf28cbfcca96a0c3e069966186225bf71f8559d6ba72a79921f31533987d3ec7d0f2fe0b1550d49febe5b367cc406a7075626c69635f6b657958208388dcf98a89b997606984c58bb77d1a761cd04ad9ad8e109aec87ac0ba6b01b69757365725f64617461f6656e6f6e6365f65860ec56ea843a948d75d5dac5a4201085c3b5f2548ed8230c0ae6d70680c7a377e50cf8c24b5730a083b132f258d4098f8a417ab0ea90e1ebe96c4602db3fd7f11bc971555e73707b9444adf231e5524c3f0fb19e824edda931167cba4fb5630c9c";
    let document = nitro_attestation::load_nitro_attestation(payload, &clock);
    // std::debug::print(&document);
    config.register_enclave(document, ctx(&mut scenario));

    next_tx(&mut scenario, @0x101ce8865558e08408b83f60ee9e78843d03d547c850cbe12cb599e17833dd3e);
    let enclave = test_scenario::take_shared<Enclave<TWITTER>>(&scenario);

    // using real enclave response for the current address
    // curl -X POST http://<PUBLIC_IP>:3000/process_data -H "Content-Type: application/json" -d '{"payload": {"user_url": "https://x.com/mystenintern/status/1852386957789114394" }}'
    // {"response":{"intent":0,"timestamp_ms":1744731581697,"data":{"twitter_name":[109,121,115,116,101,110,105,110,116,101,114,110],"sui_address":[16,28,232,134,85,88,224,132,8,184,63,96,238,158,120,132,61,3,213,71,200,80,203,225,44,181,153,225,120,51,221,62]}},"signature":"c1d19cd522f81033f5314623a87c92977e65d3b1efc03d64221e9128acb906fdd8339433408c8feb17653a0b92e4014d80a2a346d9415479efb8c8a38cfc400e"}
    let sig = x"c1d19cd522f81033f5314623a87c92977e65d3b1efc03d64221e9128acb906fdd8339433408c8feb17653a0b92e4014d80a2a346d9415479efb8c8a38cfc400e";
    let twitter_name = b"mystenintern";
    let nft = mint_nft(twitter_name,  1744731581697, &sig, &enclave, ctx(&mut scenario));
    assert!(string::utf8(twitter_name) == nft.twitter_name, 0);

    sui::transfer::transfer(nft, tx_context::sender(ctx(&mut scenario)));
    test_scenario::return_shared(config);
    clock.destroy_for_testing();
    enclave.destroy();
    destroy(cap);
    test_scenario::end(scenario);
}